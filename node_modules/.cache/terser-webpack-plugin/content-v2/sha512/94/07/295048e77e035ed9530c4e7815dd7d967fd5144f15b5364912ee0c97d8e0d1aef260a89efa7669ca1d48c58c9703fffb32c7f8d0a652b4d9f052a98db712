{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{210:function(e,n,t){\"use strict\";t.r(n);var i=t(0),a=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"photoswipe中文文档\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#photoswipe中文文档\"}},[e._v(\"#\")]),e._v(\" PhotoSwipe中文文档\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"入门\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#入门\"}},[e._v(\"#\")]),e._v(\" 入门\")]),e._v(\" \"),t(\"p\",[e._v(\"开始之前，您需要了解的是：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"PhotoSwipe 不是一个简单的jQuery插件,至少需要具备基本的JavaScript知识才能安装。\")]),e._v(\" \"),t(\"li\",[e._v(\"PhotoSwipe需要预定义的图片尺寸\"),t(\"a\",{attrs:{href:\"https://photoswipe.com/documentation/faq.html#image-size\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"更多信息\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"li\",[e._v(\"如果您在无响应的网站上使用PhotoSwipe，则控件将在移动设备上缩放（因为整个页面都缩放了）。因此，您需要实现自定义控件（例如，右上角的单个大关闭按钮）。\")]),e._v(\" \"),t(\"li\",[e._v(\"文档中的所有代码均为纯Vanilla JS，并支持IE 8及更高版本。如果您的网站或应用程序使用某些JavaScript框架（例如jQuery或MooTools），或者您不需要支持旧版浏览器，请随时简化代码。\")]),e._v(\" \"),t(\"li\",[e._v(\"避免为移动设备投放大图片（大于2000x1500px），因为大图片会大大降低动画效果，并可能导致崩溃（尤其是在iOS Safari上）。可能的解决方案：\"),t(\"a\",{attrs:{href:\"https://photoswipe.com/documentation/responsive-images.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"使用响应式图片\"),t(\"OutboundLink\")],1),e._v(\"，或在单独的页面上打开图像，或使用支持图像平铺的库（如\"),t(\"a\",{attrs:{href:\"https://leafletjs.com/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Leaflet\"),t(\"OutboundLink\")],1),e._v(\"）（在FAQ中有更多信息）。\")])]),e._v(\" \"),t(\"h3\",{attrs:{id:\"初始化\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#初始化\"}},[e._v(\"#\")]),e._v(\" 初始化\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"步骤1：引入js和css文件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#步骤1：引入js和css文件\"}},[e._v(\"#\")]),e._v(\" 步骤1：引入JS和CSS文件\")]),e._v(\" \"),t(\"p\",[e._v(\"您可以在GitHub仓库库的dist /文件夹中找到它们\\nSass和未编译的JS文件位于src /文件夹中。\\n如果你打算修改现有样式，则建议使用Sass，因为其中的代码是经过结构化和注释的。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('\\x3c!-- Core CSS file --\\x3e\\n<link rel=\"stylesheet\" href=\"path/to/photoswipe.css\"> \\n\\n\\x3c!-- Skin CSS file (styling of UI - buttons, caption, etc.)\\n     In the folder of skin CSS file there are also:\\n     - .png and .svg icons sprite, \\n     - preloader.gif (for browsers that do not support CSS animations) --\\x3e\\n<link rel=\"stylesheet\" href=\"path/to/default-skin/default-skin.css\"> \\n\\n\\x3c!-- Core JS file --\\x3e\\n<script src=\"path/to/photoswipe.min.js\"><\\/script> \\n\\n\\x3c!-- UI JS file --\\x3e\\n<script src=\"path/to/photoswipe-ui-default.min.js\"><\\/script> \\n')])])]),t(\"p\",[e._v(\"引入的文件顺序无关紧要，只有在调用 \"),t(\"code\",[e._v(\"new PhotoSwipe()\")]),e._v(\"时才会执行代码，如果你不需要在初始化时使用PhotoSwipe，请使用延迟加载\")]),e._v(\" \"),t(\"p\",[e._v(\"PhotoSwipe还支持 AMD/CMD的方式导入：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"require([ \\n        'path/to/photoswipe.js', \\n        'path/to/photoswipe-ui-default.js' \\n    ], function( PhotoSwipe, PhotoSwipeUI_Default ) {\\n\\n    //      var gallery = new PhotoSwipe( someElement, PhotoSwipeUI_Default ...\\n    //      gallery.init() \\n    //      ...\\n\\n});\\n\")])])]),t(\"p\",[e._v(\"您还可以通过Bower或者NPM进行安装。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"步骤2：将photoswipe（-pswp）元素添加到dom\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#步骤2：将photoswipe（-pswp）元素添加到dom\"}},[e._v(\"#\")]),e._v(\" 步骤2：将PhotoSwipe（.pswp）元素添加到DOM\")]),e._v(\" \"),t(\"p\",[e._v(\"您可以通过JS动态地添加HTML代码（直接在初始化之前），也可以将其直接添加到页面中（就像在演示页面上完成的一样）。该代码可以附加在任何地方，但最好在\"),t(\"code\",[e._v(\"</body>\")]),e._v(\"之前。您可以在多个图库中重复使用它（只要您使用相同的UI类）。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('\\x3c!-- Root element of PhotoSwipe. Must have class pswp. --\\x3e\\n<div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\\n\\n    \\x3c!-- Background of PhotoSwipe. \\n         It\\'s a separate element as animating opacity is faster than rgba(). --\\x3e\\n    <div class=\"pswp__bg\"></div>\\n\\n    \\x3c!-- Slides wrapper with overflow:hidden. --\\x3e\\n    <div class=\"pswp__scroll-wrap\">\\n\\n        \\x3c!-- Container that holds slides. \\n            PhotoSwipe keeps only 3 of them in the DOM to save memory.\\n            Don\\'t modify these 3 pswp__item elements, data is added later on. --\\x3e\\n        <div class=\"pswp__container\">\\n            <div class=\"pswp__item\"></div>\\n            <div class=\"pswp__item\"></div>\\n            <div class=\"pswp__item\"></div>\\n        </div>\\n\\n        \\x3c!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. --\\x3e\\n        <div class=\"pswp__ui pswp__ui--hidden\">\\n\\n            <div class=\"pswp__top-bar\">\\n\\n                \\x3c!--  Controls are self-explanatory. Order can be changed. --\\x3e\\n\\n                <div class=\"pswp__counter\"></div>\\n\\n                <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\\n\\n                <button class=\"pswp__button pswp__button--share\" title=\"Share\"></button>\\n\\n                <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\\n\\n                <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\\n\\n                \\x3c!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR --\\x3e\\n                \\x3c!-- element will get class pswp__preloader--active when preloader is running --\\x3e\\n                <div class=\"pswp__preloader\">\\n                    <div class=\"pswp__preloader__icn\">\\n                      <div class=\"pswp__preloader__cut\">\\n                        <div class=\"pswp__preloader__donut\"></div>\\n                      </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\\n                <div class=\"pswp__share-tooltip\"></div> \\n            </div>\\n\\n            <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\">\\n            </button>\\n\\n            <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\">\\n            </button>\\n\\n            <div class=\"pswp__caption\">\\n                <div class=\"pswp__caption__center\"></div>\\n            </div>\\n\\n        </div>\\n\\n    </div>\\n\\n</div>\\n')])])]),t(\"p\",[t(\"code\",[e._v(\"pswp__bg\")]),e._v(\"，\"),t(\"code\",[e._v(\"pswp__scroll-wrap\")]),e._v(\"，\"),t(\"code\",[e._v(\"pswp__container\")]),e._v(\"和\"),t(\"code\",[e._v(\"pswp__item\")]),e._v(\"元素的顺序不能更改。\")]),e._v(\" \"),t(\"p\",[e._v(\"您可能会问，为什么PhotoSwipe不能通过JS自动添加此代码，原因很简单–只是为了节省文件大小，以防万一您需要对布局进行一些修改。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"步骤3：初始化\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#步骤3：初始化\"}},[e._v(\"#\")]),e._v(\" 步骤3：初始化\")]),e._v(\" \"),t(\"p\",[e._v(\"执行PhotoSwipe构造函数。它接受4个参数：\")]),e._v(\" \"),t(\"ol\",[t(\"li\",[e._v(\".pswp 元素（必须将其添加到DOM中）。\")]),e._v(\" \"),t(\"li\",[e._v(\"PhotoSwipe UI类。如果您包括默认的photoswipe-ui-default.js，则类将为PhotoSwipeUI_Default。也可用false.\")]),e._v(\" \"),t(\"li\",[e._v(\"包含 slides 对象的数组\")]),e._v(\" \"),t(\"li\",[e._v(\"可配置的选项。\")])]),e._v(\" \"),t(\"h4\",{attrs:{id:\"创建幻灯片对象数组\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建幻灯片对象数组\"}},[e._v(\"#\")]),e._v(\" 创建幻灯片对象数组\")]),e._v(\" \"),t(\"p\",[e._v(\"数组中的每个对象都应包含有关幻灯片的数据，它可以是您希望在PhotoSwipe中显示的任何内容-图像的路径，标题字符串，共享数，注释等。\")]),e._v(\" \"),t(\"p\",[e._v(\"PhotoSwipe默认使用5个属性：src(图像路径),w(图像宽度),h(图像高度),msrc(小图像占位符的路径，大图像将在顶部加载)，html（自定义HTML，更多关于它）\")]),e._v(\" \"),t(\"p\",[e._v(\"在导航过程中，PhotoSwipe将自己的属性添加到该对象（如minZoom或已加载）\")]),e._v(\" \"),t(\"p\",[e._v(\"您可以在PhotoSwipe读取时通过 gettingData事件动态定义幻灯片内容，例如，根据不同的屏幕尺寸提供不同的图像。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"如何从链接列表构建幻灯片数组\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何从链接列表构建幻灯片数组\"}},[e._v(\"#\")]),e._v(\" 如何从链接列表构建幻灯片数组\")]),e._v(\" \"),t(\"p\",[e._v(\"假设您有一个看起来像这样的链接/缩略图列表（有关画廊标记的更多信息）：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('<div class=\"my-gallery\" itemscope itemtype=\"http://schema.org/ImageGallery\">\\n\\n    <figure itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\">\\n        <a href=\"large-image.jpg\" itemprop=\"contentUrl\" data-size=\"600x400\">\\n            <img src=\"small-image.jpg\" itemprop=\"thumbnail\" alt=\"Image description\" />\\n        </a>\\n        <figcaption itemprop=\"caption description\">Image caption</figcaption>\\n    </figure>\\n\\n    <figure itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\">\\n        <a href=\"large-image.jpg\" itemprop=\"contentUrl\" data-size=\"600x400\">\\n            <img src=\"small-image.jpg\" itemprop=\"thumbnail\" alt=\"Image description\" />\\n        </a>\\n        <figcaption itemprop=\"caption description\">Image caption</figcaption>\\n    </figure>\\n\\n\\n</div>\\n')])])]),t(\"p\",[e._v(\"并且您想点击缩略图以打开具有大图的PhotoSwipe，你需要执行以下操作：\")]),e._v(\" \"),t(\"ol\",[t(\"li\",[e._v(\"将点击事件绑定到链接/缩略图。\")]),e._v(\" \"),t(\"li\",[e._v(\"用户单击缩略图后，找到其索引。\")]),e._v(\" \"),t(\"li\",[e._v(\"从DOM元素创建幻灯片对象数组–遍历找到链接的所有href属性值（大图像url），data-size属性（图像大小），缩略图的src和标题的内容。\")])]),e._v(\" \"),t(\"p\",[e._v(\"photosweep并不在乎你怎么做。如果您使用jQuery或MooTools之类的框架，或者不需要支持IE8，代码可以大大简化。\")]),e._v(\" \"),t(\"p\",[e._v(\"以下带有IE8支持的纯Vanilla JS实现：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"var initPhotoSwipeFromDOM = function(gallerySelector) {\\n\\n    // parse slide data (url, title, size ...) from DOM elements \\n    // (children of gallerySelector)\\n    var parseThumbnailElements = function(el) {\\n        var thumbElements = el.childNodes,\\n            numNodes = thumbElements.length,\\n            items = [],\\n            figureEl,\\n            linkEl,\\n            size,\\n            item;\\n\\n        for(var i = 0; i < numNodes; i++) {\\n\\n            figureEl = thumbElements[i]; // <figure> element\\n\\n            // include only element nodes \\n            if(figureEl.nodeType !== 1) {\\n                continue;\\n            }\\n\\n            linkEl = figureEl.children[0]; // <a> element\\n\\n            size = linkEl.getAttribute('data-size').split('x');\\n\\n            // create slide object\\n            item = {\\n                src: linkEl.getAttribute('href'),\\n                w: parseInt(size[0], 10),\\n                h: parseInt(size[1], 10)\\n            };\\n\\n\\n\\n            if(figureEl.children.length > 1) {\\n                // <figcaption> content\\n                item.title = figureEl.children[1].innerHTML; \\n            }\\n\\n            if(linkEl.children.length > 0) {\\n                // <img> thumbnail element, retrieving thumbnail url\\n                item.msrc = linkEl.children[0].getAttribute('src');\\n            } \\n\\n            item.el = figureEl; // save link to element for getThumbBoundsFn\\n            items.push(item);\\n        }\\n\\n        return items;\\n    };\\n\\n    // find nearest parent element\\n    var closest = function closest(el, fn) {\\n        return el && ( fn(el) ? el : closest(el.parentNode, fn) );\\n    };\\n\\n    // triggers when user clicks on thumbnail\\n    var onThumbnailsClick = function(e) {\\n        e = e || window.event;\\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\\n\\n        var eTarget = e.target || e.srcElement;\\n\\n        // find root element of slide\\n        var clickedListItem = closest(eTarget, function(el) {\\n            return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');\\n        });\\n\\n        if(!clickedListItem) {\\n            return;\\n        }\\n\\n        // find index of clicked item by looping through all child nodes\\n        // alternatively, you may define index via data- attribute\\n        var clickedGallery = clickedListItem.parentNode,\\n            childNodes = clickedListItem.parentNode.childNodes,\\n            numChildNodes = childNodes.length,\\n            nodeIndex = 0,\\n            index;\\n\\n        for (var i = 0; i < numChildNodes; i++) {\\n            if(childNodes[i].nodeType !== 1) { \\n                continue; \\n            }\\n\\n            if(childNodes[i] === clickedListItem) {\\n                index = nodeIndex;\\n                break;\\n            }\\n            nodeIndex++;\\n        }\\n\\n\\n\\n        if(index >= 0) {\\n            // open PhotoSwipe if valid index found\\n            openPhotoSwipe( index, clickedGallery );\\n        }\\n        return false;\\n    };\\n\\n    // parse picture index and gallery index from URL (#&pid=1&gid=2)\\n    var photoswipeParseHash = function() {\\n        var hash = window.location.hash.substring(1),\\n        params = {};\\n\\n        if(hash.length < 5) {\\n            return params;\\n        }\\n\\n        var vars = hash.split('&');\\n        for (var i = 0; i < vars.length; i++) {\\n            if(!vars[i]) {\\n                continue;\\n            }\\n            var pair = vars[i].split('=');  \\n            if(pair.length < 2) {\\n                continue;\\n            }           \\n            params[pair[0]] = pair[1];\\n        }\\n\\n        if(params.gid) {\\n            params.gid = parseInt(params.gid, 10);\\n        }\\n\\n        return params;\\n    };\\n\\n    var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {\\n        var pswpElement = document.querySelectorAll('.pswp')[0],\\n            gallery,\\n            options,\\n            items;\\n\\n        items = parseThumbnailElements(galleryElement);\\n\\n        // define options (if needed)\\n        options = {\\n\\n            // define gallery index (for URL)\\n            galleryUID: galleryElement.getAttribute('data-pswp-uid'),\\n\\n            getThumbBoundsFn: function(index) {\\n                // See Options -> getThumbBoundsFn section of documentation for more info\\n                var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail\\n                    pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\\n                    rect = thumbnail.getBoundingClientRect(); \\n\\n                return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};\\n            }\\n\\n        };\\n\\n        // PhotoSwipe opened from URL\\n        if(fromURL) {\\n            if(options.galleryPIDs) {\\n                // parse real index when custom PIDs are used \\n                // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\\n                for(var j = 0; j < items.length; j++) {\\n                    if(items[j].pid == index) {\\n                        options.index = j;\\n                        break;\\n                    }\\n                }\\n            } else {\\n                // in URL indexes start from 1\\n                options.index = parseInt(index, 10) - 1;\\n            }\\n        } else {\\n            options.index = parseInt(index, 10);\\n        }\\n\\n        // exit if index not found\\n        if( isNaN(options.index) ) {\\n            return;\\n        }\\n\\n        if(disableAnimation) {\\n            options.showAnimationDuration = 0;\\n        }\\n\\n        // Pass data to PhotoSwipe and initialize it\\n        gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);\\n        gallery.init();\\n    };\\n\\n    // loop through all gallery elements and bind events\\n    var galleryElements = document.querySelectorAll( gallerySelector );\\n\\n    for(var i = 0, l = galleryElements.length; i < l; i++) {\\n        galleryElements[i].setAttribute('data-pswp-uid', i+1);\\n        galleryElements[i].onclick = onThumbnailsClick;\\n    }\\n\\n    // Parse URL and open gallery if it contains #&pid=3&gid=1\\n    var hashData = photoswipeParseHash();\\n    if(hashData.pid && hashData.gid) {\\n        openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );\\n    }\\n};\\n\\n// execute above function\\ninitPhotoSwipeFromDOM('.my-gallery');\\n\")])])]),t(\"h2\",{attrs:{id:\"选项\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#选项\"}},[e._v(\"#\")]),e._v(\" 选项\")]),e._v(\" \"),t(\"p\",[e._v(\"选项以键值对的形式添加并作为参数传递给PhotoSwipe构造函数，例如：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"var options = {\\n    index: 3,\\n    escKey: false,\\n\\n    // ui option\\n    timeToIdle: 4000\\n};\\nvar gallery = new PhotoSwipe( someElement, PhotoSwipeUI_Default, someItems, options);\\ngallery.init();\\n\\n// Note that options object is cloned during the initialization.\\n// But you can access it via `gallery.options`.\\n// For example, to dynamically change `escKey`:\\ngallery.options.escKey = false;\\n\\n// `options.escKey = false` will not work\\n\")])])]),t(\"h3\",{attrs:{id:\"核心\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#核心\"}},[e._v(\"#\")]),e._v(\" 核心\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"index\")]),e._v(\": number类型| 默认值：0\")])]),e._v(\" \"),t(\"p\",[e._v(\"开始幻灯片索引。0是第一张幻灯片。必须为整数，而不是字符串。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"getThumbBoundsFn\")]),e._v(\": function\\n函数应该返回一个具有坐标的对象，初始缩放动画将从坐标开始(或缩放动画将结束)。\")])]),e._v(\" \"),t(\"p\",[e._v(\"对象应该包含三个属性:x (相对于文档左上角水平偏移量)，y (相对于文档左上角垂直偏移量)，w(元素的宽度)。高度将根据大图的尺寸自动计算。例如，如果你返回{x:0,y:0,w:50}缩放动画将从页面左上角开始。\")]),e._v(\" \"),t(\"p\",[e._v(\"函数包含一个参数\"),t(\"code\",[e._v(\"index\")]),e._v(\"：打开或关闭项的下标.\")]),e._v(\" \"),t(\"p\",[e._v(\"在非模态框模式下，模板相对于视图的位置应该从x和y中减去。更多信息请看\"),t(\"a\",{attrs:{href:\"https://photoswipe.com/documentation/faq.html#inline-gallery\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"FAQ\"),t(\"OutboundLink\")],1),e._v(\"。\")]),e._v(\" \"),t(\"p\",[e._v(\"计算缩略图位置的例子:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"getThumbBoundsFn: function(index) {\\n\\n    // find thumbnail element\\n    var thumbnail = document.querySelectorAll('.my-gallery-thumbnails')[index];\\n\\n    // get window scroll Y\\n    var pageYScroll = window.pageYOffset || document.documentElement.scrollTop; \\n    // optionally get horizontal scroll\\n\\n    // get position of element relative to viewport\\n    var rect = thumbnail.getBoundingClientRect(); \\n\\n    // w = width\\n    return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};\\n\\n\\n    // Good guide on how to get element coordinates:\\n    // http://javascript.info/tutorial/coordinates\\n}\\n\")])])]),t(\"p\",[e._v(\"如果你的缩略图的尺寸与大图像的尺寸不匹配，考虑启用缩放+渐变过渡。您可以通过添加选项\"),t(\"code\",[e._v(\"showHideOpacity:true\")]),e._v(\"来做到这一点(试着将它添加到上面的代码页来测试它的外观)。或者通过添加\"),t(\"code\",[e._v(\"hideAnimationDuration:0\")]),e._v(\", \"),t(\"code\",[e._v(\"showAnimationDuration:0\")]),e._v(\"来禁用过渡。更多信息在\"),t(\"a\",{attrs:{href:\"https://photoswipe.com/documentation/faq.html#different-thumbnail-dimensions\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"FAQ\"),t(\"OutboundLink\")],1),e._v(\"中。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"showHideOpacity\")]),e._v(\" :boolean | false\")])]),e._v(\" \"),t(\"p\",[e._v(\"如果设置为false:过渡动画时图片的透明度不会随着图片的缩放而改变，否则 根PhotoSwipe元素的透明度和图片缩放会随着过渡动画而改变\")]),e._v(\" \"),t(\"p\",[e._v(\"如果想要仅仅启用透明度过渡(没有缩放)，不要定义getThumbBoundsFn选项。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"showAnimationDuration\")]),e._v(\" number | 333\")])]),e._v(\" \"),t(\"p\",[e._v(\"放大动画持续时间(毫秒)。设置为0禁用。除了这个JS选项，你还需要CSS文件:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\".pswp--animate_opacity,\\n.pswp__bg,\\n.pswp__caption,\\n.pswp__top-bar,\\n.pswp--has_mouse .pswp__button--arrow--left,\\n.pswp--has_mouse .pswp__button--arrow--right{\\n    -webkit-transition: opacity 333ms cubic-bezier(.4,0,.22,1);\\n    transition: opacity 333ms cubic-bezier(.4,0,.22,1);\\n}\\n\")])])]),t(\"p\",[e._v(\"如果使用Sass，只需更改_main-settings.scss中的转换持续时间变量。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"hideAnimationDuration\")]),e._v(\" : number | 333\")])]),e._v(\" \"),t(\"p\",[e._v(\"缩小动画的持续时间，pswp——open类将被添加到根元素中，您可以使用它在CSS中应用不同的转换持续时间。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"bgOpacity\")]),e._v(\": number | 1\")])]),e._v(\" \"),t(\"p\",[t(\"code\",[e._v(\".pswp__bg\")]),e._v(\" 元素背景的透明度，取值范围0-1，通过js设置，随着相关手势改变。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"spacing\")]),e._v(\": number | 0.12\")])]),e._v(\" \"),t(\"p\",[e._v(\"幻灯片间隔，单位百分比，0.12表示滑动饰扣宽度的12%（四舍五入）\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"allowPanToNext\")]),e._v(\": boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"允许手势滑动到切换时图片处于缩放状态，此选项在无触摸手势的设备上永远为false。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"maxSpreadZoom\")]),e._v(\"：number | 2\")])]),e._v(\" \"),t(\"p\",[e._v(\"执行扩展(缩放)手势时的最大缩放级别。2表示图像可以从原来的大小缩小2倍。在这里尽量避免大的值，因为太大的图像可能会在移动设备上导致内存问题(尤其是在iOS上)。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"getDoubleTapZoom\")]),e._v(\"：function\")])]),e._v(\" \"),t(\"p\",[e._v(\"在双击手势触发后返回缩放级别，或当用户点击缩放图标时，或当鼠标点击图片时。如果返回1 图片将回到原始尺寸。\")]),e._v(\" \"),t(\"p\",[e._v(\"默认值：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"getDoubleTapZoom: function(isMouseClick, item) {\\n\\n    // isMouseClick          - true if mouse, false if double-tap\\n    // item                  - slide object that is zoomed, usually current\\n    // item.initialZoomLevel - initial scale ratio of image\\n    //                         e.g. if viewport is 700px and image is 1400px,\\n    //                              initialZoomLevel will be 0.5\\n\\n    if(isMouseClick) {\\n\\n        // is mouse click on image or zoom icon\\n\\n        // zoom to original\\n        return 1;\\n\\n        // e.g. for 1400px image:\\n        // 0.5 - zooms to 700px\\n        // 2   - zooms to 2800px\\n\\n    } else {\\n\\n        // is double-tap\\n\\n        // zoom to original if initial zoom is less than 0.7x,\\n        // otherwise to 1.5x, to make sure that double-tap gesture always zooms image\\n        return item.initialZoomLevel < 0.7 ? 1 : 1.5;\\n    }\\n}\\n\")])])]),t(\"p\",[e._v(\"函数在每次启动放大动画时被调用。因此，您可以根据图像的大小或屏幕DPI为不同的图像返回不同的值。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"loop\")]),e._v(\"：boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"手势滑动时是否循环滚动。当滚动选项少于3张时一直为 false\")]),e._v(\" \"),t(\"p\",[e._v(\"此选项与箭头导航无关。箭头循环永久开启。您可以通过创建自定义UI来修改此行为。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"pinchToClose\")]),e._v(\"：boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"双指捏合关闭画廊手势，画廊的背景将逐渐淡出，因为用户缩小。手势完成后，画廊将关闭\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"closeOnScroll\")]),e._v(\"：boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"页面滚动时关闭画廊，该选项只适用于非手势设备。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"closeOnVerticalDrag\")]),e._v(\"：boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"垂直拖动图片时关闭画廊。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"mouseUsed\")]),e._v(\"：boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"该选项允许您预定义是否使用鼠标，一些PhotoSwipe 特性依赖它，例如：默认的UI左右箭头只会在选项设置为true的情况下显示，\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"escKey\")]),e._v(\"：boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"支持使用\"),t(\"code\",[e._v(\"Esc\")]),e._v(\"键退出画廊模式，此属性支持动态设置\\n\"),t(\"code\",[e._v(\"yourPhotoSwipeInstance.options.escKey = false;\")])]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"arrowKeys\")]),e._v(\": boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"是否开启键盘左右键导航，可动态开启\"),t(\"code\",[e._v(\"yourPhotoSwipeInstance.options.arrowKeys = false;\")])]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"history\")]),e._v(\"： boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"如果设置为false，则禁用历史记录模块(后退按钮关闭图库，每个幻灯片的唯一URL)。您还可以从构建中排除history.js模块。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"galleryUID\")]),e._v(\": number | 1\")])]),e._v(\" \"),t(\"p\",[e._v(\"画廊唯一ID。历史模块在形成URL时使用。例如，带有UID 1的画廊的第二张图片将有URL: http://example.com/#&gid=1&pid=2。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"galleryPIDs\")]),e._v(\"： boolean | false\")])]),e._v(\" \"),t(\"p\",[e._v(\"允许为每个幻灯片对象自定义id。如果将选项设置为true，则滑动对象必须具有pid(图片标识符)属性，该属性可以是字符串或整数。例如:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"var slides = [\\n    {\\n        src: 'path/to/1.jpg',\\n        w:500,\\n        h:400,\\n        pid: 'image-one'\\n    },\\n    {\\n        src: 'path/to/2.jpg',\\n        w:300,\\n        h:700,\\n        pid: 'image-two'\\n    },\\n\\n    ... \\n];\\n\")])])]),t(\"p\",[e._v(\"第二个幻灯片的Url为 \"),t(\"code\",[e._v(\"http://example.com/#&gid=1&pid=image-two\")])]),e._v(\" \"),t(\"p\",[e._v(\"有关如何实现自定义PID的更多信息，请参阅FAQ部分。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"errorMsg\")]),e._v(\" :string\")])]),e._v(\" \"),t(\"p\",[e._v(\"图像未加载时的错误信息 \"),t(\"code\",[e._v(\"%url%\")]),e._v(\"将被图像的url替换。\")]),e._v(\" \"),t(\"p\",[e._v(\"默认值：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('<div class=\"pswp__error-msg\"><a href=\"%url%\" target=\"_blank\">The image</a> could not be loaded.</div>\\n')])])]),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"preload\")]),e._v(\": array | [1,1]\")])]),e._v(\" \"),t(\"p\",[e._v(\"根据移动方向延迟加载附近的图片。应该是一个有两个整数的数组，第一个整数是当前图像之前要预加载的项数，第二个整数是当前图像之后后要预加载的项数。例如，如果你把它设置为[1,3]，它将加载当前图片之前一张图片和之后的三张图片。数组的值不能小于1。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"mainClass\")]),e._v(\": string | undefined\")])]),e._v(\" \"),t(\"p\",[e._v(\".pswp 根元素的额外添加的类名，可以包含多个类名，已空格分隔\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"getNumItemsFn\")]),e._v(\"：function\")])]),e._v(\" \"),t(\"p\",[e._v(\"返回画廊中图片总数的函数。尽量保证函数简洁，此函数会频繁执行。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"focus\")]),e._v(\"： boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"画廊打开后将设置PhotoSwipe 元素为焦点\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"isClickableElement\")]),e._v(\"：function\")])]),e._v(\" \"),t(\"p\",[e._v(\"默认值：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"isClickableElement: function(el) {\\n    return el.tagName === 'A';\\n}\\n\")])])]),t(\"p\",[e._v(\"检查元素是否可以点击，如果是，PhotoSwipe 将不执行 \"),t(\"code\",[e._v(\"preventDefault\")]),e._v(\"以保证点击生效。\\n函数应该尽可能间接，因为它在拖动时会被多次执行。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"modal\")]),e._v(\"： boolean | true\")])]),e._v(\" \"),t(\"p\",[e._v(\"控制 PhotoSwipe 查看器是否占据整个视图区域。 如果设置为false，查看器将已当前位置父元素为魔板展开\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"默认ui选项\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#默认ui选项\"}},[e._v(\"#\")]),e._v(\" 默认UI选项\")]),e._v(\" \"),t(\"p\",[e._v(\"将PhotoSwipeUI_Default (dist/ui/photoswipe-ui-default.js)的选项以相同的方式添加到与核心选项相同的对象中。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// 顶部导航和底部状态栏的高度,\\n// \\\"bottom\\\" 属性的值可以是 'auto' (自动计算高度)\\n// 属性在mouse使用情况下才能生效, \\n// 或者屏幕宽度大于 1200px\\n// \\n// (Also refer to `parseVerticalMargin` event)\\nbarsSize: {top:44, bottom:'auto'}, \\n\\n// Adds class pswp__ui--idle to pswp__ui element when mouse isn't moving for 4000ms\\n// 当鼠标不移动4000毫秒后，将类pswp__ui--idle添加到pswp__ui元素\\ntimeToIdle: 4000,\\n\\n// Same as above, but this timer applies when mouse leaves the window\\n// 当鼠标离开窗口后添加\\ntimeToIdleOutside: 1000,\\n\\n// Delay until loading indicator is displayed\\n// 显示加载指示器的延迟\\nloadingIndicatorDelay: 1000,\\n\\n// Function builds caption markup\\naddCaptionHTMLFn: function(item, captionEl, isFake) {\\n    // item      - slide object\\n    // captionEl - caption DOM element\\n    // isFake    - true when content is added to fake caption container\\n    //             (used to get size of next or previous caption)\\n\\n    if(!item.title) {\\n        captionEl.children[0].innerHTML = '';\\n        return false;\\n    }\\n    captionEl.children[0].innerHTML = item.title;\\n    return true;\\n},\\n\\n// Buttons/elements\\ncloseEl:true,\\ncaptionEl: true,\\nfullscreenEl: true,\\nzoomEl: true,\\nshareEl: true,\\ncounterEl: true,\\narrowEl: true,\\npreloaderEl: true,\\n\\n// Tap on sliding area should close gallery\\ntapToClose: false,\\n\\n// Tap should toggle visibility of controls\\ntapToToggleControls: true,\\n\\n// Mouse click on image should close the gallery,\\n// only when image is smaller than size of the viewport\\nclickToCloseNonZoomable: true,\\n\\n// Element classes click on which should close the PhotoSwipe.\\n// In HTML markup, class should always start with \\\"pswp__\\\", e.g.: \\\"pswp__item\\\", \\\"pswp__caption\\\".\\n// \\n// \\\"pswp__ui--over-close\\\" class will be added to root element of UI when mouse is over one of these elements\\n// By default it's used to highlight the close button.\\ncloseElClasses: ['item', 'caption', 'zoom-wrap', 'ui', 'top-bar'], \\n\\n// Separator for \\\"1 of X\\\" counter\\nindexIndicatorSep: ' / ',\\n\\n\\n\\n// Share buttons\\n// \\n// Available variables for URL:\\n// {{url}}             - url to current page\\n// {{text}}            - title\\n// {{image_url}}       - encoded image url\\n// {{raw_image_url}}   - raw image url\\nshareButtons: [\\n    {id:'facebook', label:'Share on Facebook', url:'https://www.facebook.com/sharer/sharer.php?u={{url}}'},\\n    {id:'twitter', label:'Tweet', url:'https://twitter.com/intent/tweet?text={{text}}&url={{url}}'},\\n    {id:'pinterest', label:'Pin it', url:'http://www.pinterest.com/pin/create/button/?url={{url}}&media={{image_url}}&description={{text}}'},\\n    {id:'download', label:'Download image', url:'{{raw_image_url}}', download:true}\\n],\\n\\n\\n// Next 3 functions return data for share links\\n// \\n// functions are triggered after click on button that opens share modal,\\n// which means that data should be about current (active) slide\\ngetImageURLForShare: function( shareButtonData ) {\\n    // `shareButtonData` - object from shareButtons array\\n    // \\n    // `pswp` is the gallery instance object,\\n    // you should define it by yourself\\n    // \\n    return pswp.currItem.src || '';\\n},\\ngetPageURLForShare: function( shareButtonData ) {\\n    return window.location.href;\\n},\\ngetTextForShare: function( shareButtonData ) {\\n    return pswp.currItem.title || '';\\n},\\n\\n// Parse output of share links\\nparseShareButtonOut: function(shareButtonData, shareButtonOut) {\\n    // `shareButtonData` - object from shareButtons array\\n    // `shareButtonOut` - raw string of share link element\\n    return shareButtonOut;\\n}\\n\")])])]),t(\"h2\",{attrs:{id:\"api\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#api\"}},[e._v(\"#\")]),e._v(\" API\")]),e._v(\" \"),t(\"p\",[e._v(\"以下所有的属性和方法都是公共的，您可以在初始化时获取PhotoSwipe实例化对象\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"var photoswipeInstance = new PhotoSwipe( /* ... */ );\\n\")])])]),t(\"h3\",{attrs:{id:\"方法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方法\"}},[e._v(\"#\")]),e._v(\" 方法\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"var pswp = new PhotoSwipe( /* ... */ );\\n\\n// 初始化与打开画廊\\n// (您可以在调用之前绑定事件)\\npswp.init();\\n\\n// Go to slide by index\\n// @param {int} `index`\\npswp.goTo(index);\\n\\n// Go to the next slide\\npswp.next();\\n\\n// Go to the previous slide\\npswp.prev();\\n\\n// 更新画廊尺寸\\n// @param  {boolean} `force` 如果设置为 true, 即使视图尺寸没有发生变化也会触发更新\\n//                          \\npswp.updateSize(force);\\n\\n// Close gallery\\npswp.close();\\n\\n// Destroy gallery,\\n// automatically called after close() \\npswp.destroy()\\n\\n// Zoom current slide to (optionally with animation)\\n// @param  {number}   `destZoomLevel` Destination scale number. 1 - original.  \\n//                                   pswp.currItem.fitRatio - image will fit into viewport.\\n// @param  {object}   `centerPoint`   Object of x and y coordinates, relative to viewport.\\n// @param  {int}      `speed`         Animation duration. Can be 0.\\n// @param  {function} `easingFn`      Easing function (optional). Set to false to use default easing.\\n// @param  {function} `updateFn`      Function will be called on each update frame. (optional)\\n//\\n// Example below will 2x zoom to center of slide:\\n// pswp.zoomTo(2, {x:pswp.viewportSize.x/2,y:pswp.viewportSize.y/2}, 2000, false, function(now) {\\n//      \\n// });\\npswp.zoomTo(destZoomLevel, centerPoint, speed, easingFn, updateFn);\\n\\n// Apply zoom and pan to the current slide\\n// \\n// @param   {number} `zoomLevel`\\n// @param   {int}    `panX`\\n// @param   {int}    `panY`\\n// \\n// For example: `pswp.applyZoomPan(1, 0, 0)`\\n// will zoom current image to the original size\\n// and will place it on top left corner\\n// \\n// \\npswp.applyZoomPan(zoomLevel, panX, panY);\\n\")])])]),t(\"h3\",{attrs:{id:\"属性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性\"}},[e._v(\"#\")]),e._v(\" 属性\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// current slide object\\npswp.currItem\\n\\n// items array (slides, images)\\npswp.items\\n\\n// size of sliding viewport\\npswp.viewportSize\\n\\n// object holds all functions from framework\\n// framework-bridge.js\\npswp.framework\\n\\n// UI object (e.g. PhotoSwipeUI_Default instance)\\npswp.ui\\n\\n// background element (pswp__bg)\\npswp.bg\\n\\n// container element (pswp__container)\\npswp.container\\n\\n// options\\npswp.options\\n\\n\\n\\n// Even though methods below aren't technically properties, we list them here:\\n\\n// current item index (int)\\npswp.getCurrentIndex();\\n\\n// total number of items\\npswp.options.getNumItemsFn()\\n\\n// current zoom level (number)\\npswp.getZoomLevel();\\n\\n// one (or more) pointer is used\\npswp.isDragging();\\n\\n// two (or more) pointers are used\\npswp.isZooming();\\n\\n// `true` when transition between is running (after swipe)\\npswp.isMainScrollAnimating();\\n\")])])]),t(\"h3\",{attrs:{id:\"事件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事件\"}},[e._v(\"#\")]),e._v(\" 事件\")]),e._v(\" \"),t(\"p\",[e._v(\"PhotoSwipe 使用了非常简单的事件/通知系统。它包含两个方法\"),t(\"code\",[e._v(\"shout\")]),e._v(\"(触发事件) 和 \"),t(\"code\",[e._v(\"listen\")]),e._v(\"(控制器),目前还没有方法来解除绑定监听器,但是他们会在PhotoSwipe关闭时全部被清除\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"var pswp = new PhotoSwipe(/* ... */);\\n\\n// Listen for \\\"helloWorld\\\" event\\npswp.listen('helloWorld', function(name) {\\n   alert('Name is: ' + name);\\n});\\n\\n// Trigger \\\"helloWorld\\\" event\\npswp.shout('helloWorld', 'John' /* you may pass more arguments */);\\n\")])])]),t(\"p\",[e._v(\"可用事件：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// 图片切换之前\\n// (内容变化之前，导航变化之后)\\n// Update UI here (like \\\"1 of X\\\" indicator)\\npswp.listen('beforeChange', function() { });\\n\\n// 图片切换完成后\\n// (after content changed)\\npswp.listen('afterChange', function() { });\\n\\n// 图片加载完成\\npswp.listen('imageLoadComplete', function(index, item) { \\n   // index - index of a slide that was loaded\\n   // item - slide object\\n});\\n\\n// 视窗尺寸发生改变\\npswp.listen('resize', function() { });\\n\\n// PhotoSwipe 读取 slide 数据时触发,\\n// which happens before content is set, or before lazy-loading is initiated.\\n// 多用来动态修改属性\\npswp.listen('gettingData', function(index, item) {\\n   // index - index of a slide that was loaded\\n   // item - slide object\\n\\n   // e.g. change path to the image based on `something`\\n   if( something ) {\\n       item.src = item.something;\\n   } else {\\n       item.src = item.somethingElse;\\n   }\\n});\\n\\n// Mouse was used (triggers only once)\\npswp.listen('mouseUsed', function() { });\\n\\n\\n// 放大动画开始时触发\\npswp.listen('initialZoomIn', function() { });\\n\\n// 放大动画结束时触发\\npswp.listen('initialZoomInEnd', function() { });\\n\\n// 缩小动画开始时触发\\npswp.listen('initialZoomOut', function() { });\\n\\n// 缩小动画结束后触发\\npswp.listen('initialZoomOutEnd', function() { });\\n\\n\\n// 允许覆盖单个slide项的垂直外边距\\npswp.listen('parseVerticalMargin', function(item) { \\n   // For example:\\n   var gap = item.vGap;\\n\\n   gap.top = 50; // There will be 50px gap from top of viewport\\n   gap.bottom = 100; // and 100px gap from the bottom\\n})\\n\\n// 画廊开始关闭\\npswp.listen('close', function() { });\\n\\n// 画廊解绑事件\\n// (关闭动画开始时触发)\\npswp.listen('unbindEvents', function() { });\\n\\n// 画廊关闭且动画执行完成后触发.\\n// Clean up your stuff here.\\npswp.listen('destroy', function() { });\\n\\n// 页面滚动时调用.\\n// 回调函数传递一个偏移量对象 {x: number, y: number}.\\n//\\n// PhotoSwipe 通过偏移量确定页面的左上角位置\\n// 当module设置为false时，默认为视窗左上角,\\n// 您应该在调用 .init()之前监听此事件并修改偏移量\\n// 使用魔板的 getBoundingClientRect().\\n//\\n// Look at the \\\"Implementing inline gallery display\\\" FAQ section for more info.\\npswp.listen('updateScrollOffset', function(_offset) {\\n   var r = gallery.template.getBoundingClientRect();\\n   _offset.x += r.left;\\n   _offset.y += r.top;\\n});\\n\\n// PhotoSwipe有一个名为pswpTap的特殊事件\\n// 使用默认的JavaScript事件模型调度。\\n// 因此，你可以调用 stopPropagation.\\n// pswp.framework.bind - 是 addEventListener的缩写\\npswp.framework.bind( pswp.scrollWrap /* bind on any element of gallery */, 'pswpTap', function(e) {\\n   console.log('tap', e, e.detail);\\n   // e.detail.origEvent  // original event that finished tap (e.g. mouseup or touchend)\\n   // e.detail.target // e.target of original event\\n   // e.detail.releasePoint // object with x/y coordinates of tap\\n   // e.detail.pointerType // mouse, touch, or pen\\n});\\n\\n// Allow to call preventDefault on down and up events\\npswp.listen('preventDragEvent', function(e, isDown, preventObj) {\\n   // e - original event\\n   // isDown - true = drag start, false = drag release\\n\\n   // Line below will force e.preventDefault() on:\\n   // touchstart/mousedown/pointerdown events\\n   // as well as on:\\n   // touchend/mouseup/pointerup events\\n   preventObj.prevent = true;\\n});\\n\\n\\n\\n// Default UI events\\n// -------------------------\\n\\n// 分享按钮点击事件\\npswp.listen('shareLinkClick', function(e, target) { \\n   // e - original click event\\n   // target - link that was clicked\\n\\n   // If `target` has `href` attribute and \\n   // does not have `download` attribute - \\n   // share modal window will popup\\n});\\n\")])])]),t(\"h3\",{attrs:{id:\"动态添加slides\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#动态添加slides\"}},[e._v(\"#\")]),e._v(\" 动态添加slides\")]),e._v(\" \"),t(\"p\",[e._v(\"直接修改items数组即可:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('pswp.items.push({\\n   src: \"path/to/image.jpg\", \\n   w:1200,\\n   h:500 \\n});\\n')])])]),t(\"p\",[e._v(\"如果您修改的是当前、下一个或上一个slide，你需要调用方法来更新他们\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// sets a flag that slides should be updated\\npswp.invalidateCurrItems();\\n// updates the content of slides\\npswp.updateSize(true);\\n\")])])]),t(\"p\",[e._v(\"否则，您无需执行其他任何操作。如果您要更新默认UI的某些部分（例如，“ 1 of X”计数器），则可能会调用pswp.ui.update（）。另请注意：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"您不能赋值整个数组，只能对其进行修改（例如，使用splice删除元素）。\")]),e._v(\" \"),t(\"li\",[e._v(\"如果要删除当前slide-请先调用 goTo 方法\")]),e._v(\" \"),t(\"li\",[e._v(\"至少需要一个slide\")]),e._v(\" \"),t(\"li\",[e._v(\"此方法用于服务响应式图片。\")])]),e._v(\" \"),t(\"h2\",{attrs:{id:\"自定义html内容\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自定义html内容\"}},[e._v(\"#\")]),e._v(\" 自定义HTML内容\")]),e._v(\" \"),t(\"p\",[e._v(\"如果您想在Slide中显示HTML内容，您需要在slides对象中定义 html属性。它应该是HTML字符串或者DOM元素对象\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"var items = [\\n    // slide 1 with HTML\\n    {\\n        html: '<div><h1>Any HTML <a href=\\\"http://example.com\\\">content</a></h1></div>'\\n    },\\n\\n    // slide 2 with image\\n    {\\n        src: 'path/to/image.jpg',\\n        w:600,\\n        h:200\\n    }\\n];\\n\\n\\n// 初始化\\nvar gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);\\n\\n// 不必一开始就包含html属性.\\n// 也可以在gettingData事件中动态插入:\\n/*\\n    gallery.listen('gettingData', function(index, item) {\\n        if(index === 3) {\\n            item.html = '<div>Dynamically generated HTML ' + Math.random() + '</div>';\\n        }\\n\\n    });\\n*/\\n\\n// 绑定gettingData事件后调用 init方法。\\ngallery.init();\\n\")])])]),t(\"p\",[e._v(\"其他重要说明：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"为了避免与其他第三方模块冲突，包含html属性的slide项应该不包含src属性\")]),e._v(\" \"),t(\"li\",[e._v(\"PhotoSwipe 是为图片设计，而不是作为文本内容的滚动容器，例如带有相关画廊的幻灯片，介绍性幻灯片或图像之间的广告\")]),e._v(\" \"),t(\"li\",[e._v(\"强烈建议您不要使用此方法添加视频或音频元素或者iframe，由于HTML5视频在许多移动浏览器中都阻止了触摸事件（用户将无法对其进行滑动）。如果确实需要在PhotoSwipe中播放视频，则可以将其添加为用户在当前幻灯片上轻按时出现的模态框中，可以在DOM中动态创建模态并将其添加到\"),t(\"code\",[e._v(\".pswp__scroll-wrap\")]),e._v(\"元素之后\")]),e._v(\" \"),t(\"li\",[e._v(\"如果您启用了初始放大/缩小过渡，如果当前幻灯片具有\"),t(\"code\",[e._v(\"html\")]),e._v(\"，PhotoSwipe将自动禁用它，而将使用简单的淡入过渡。\")]),e._v(\" \"),t(\"li\",[e._v(\"默认情况下，PhotoSwipe将仅在a标签及其子元素上允许单击事件。要更改此行为，请查看isClickableElement选项或preventDragEvent事件\")]),e._v(\" \"),t(\"li\",[e._v(\"HTML slides不支持缩放。\")])]),e._v(\" \"),t(\"h2\",{attrs:{id:\"响应式图片\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#响应式图片\"}},[e._v(\"#\")]),e._v(\" 响应式图片\")]),e._v(\" \"),t(\"p\",[e._v(\"PhotoSwipe不支持\"),t(\"code\",[e._v(\"<picture>\")]),e._v(\"或srcset，因为它需要定义的图像尺寸并使用延迟加载。但是，由于图像是动态加载的，即使在不支持srcset的旧浏览器中，切换资源也很容易。\")]),e._v(\" \"),t(\"p\",[e._v(\"假设您只有“中”图像和“原始”（“大”）图像。首先，您需要将图像的路径和大小存储在幻灯片对象中，例如:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"var items = [\\n\\n    // Slide 1\\n    {\\n        mediumImage: {\\n            src: 'path/to/medium-image-1.jpg',\\n            w:800,\\n            h:600\\n        },\\n        originalImage: {\\n            src: 'path/to/large-image-1.jpg',\\n            w: 1400,\\n            h: 1050\\n        }\\n    },\\n\\n    // Slide 2\\n    // {\\n    //     mediumImage: {\\n    //         src: 'path/to/medium-image-2.jpg',\\n    //         ...\\n    //     \\n    // ...\\n\\n];\\n\")])])]),t(\"p\",[e._v(\"然后：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// initialise as usual\\nvar gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);\\n\\n// 声明变量保存实际视窗宽度\\nvar realViewportWidth,\\n    useLargeImages = false,\\n    firstResize = true,\\n    imageSrcWillChange;\\n\\n// 在视窗发生改变时会触发 beforeResize 事件\\ngallery.listen('beforeResize', function() {\\n    // gallery.viewportSize.x - width of PhotoSwipe viewport\\n    // gallery.viewportSize.y - height of PhotoSwipe viewport\\n    // window.devicePixelRatio - ratio between physical pixels and device independent pixels (Number)\\n    //                          1 (regular display), 2 (@2x, retina) ...\\n\\n\\n    // 计算视窗真实像素\\n    realViewportWidth = gallery.viewportSize.x * window.devicePixelRatio;\\n\\n    // 如果要图像在window.resize上动态切换，则需要以下代码。\\n\\n    // Find out if current images need to be changed\\n    if(useLargeImages && realViewportWidth < 1000) {\\n        useLargeImages = false;\\n        imageSrcWillChange = true;\\n    } else if(!useLargeImages && realViewportWidth >= 1000) {\\n        useLargeImages = true;\\n        imageSrcWillChange = true;\\n    }\\n\\n    // Invalidate items only when source is changed and when it's not the first update\\n    if(imageSrcWillChange && !firstResize) {\\n        // invalidateCurrItems sets a flag on slides that are in DOM,\\n        // which will force update of content (image) on window.resize.\\n        gallery.invalidateCurrItems();\\n    }\\n\\n    if(firstResize) {\\n        firstResize = false;\\n    }\\n\\n    imageSrcWillChange = false;\\n\\n});\\n\\n\\n// gettingData event fires each time PhotoSwipe retrieves image source & size\\ngallery.listen('gettingData', function(index, item) {\\n\\n    // Set image source & size based on real viewport width\\n    if( useLargeImages ) {\\n        item.src = item.originalImage.src;\\n        item.w = item.originalImage.w;\\n        item.h = item.originalImage.h;\\n    } else {\\n        item.src = item.mediumImage.src;\\n        item.w = item.mediumImage.w;\\n        item.h = item.mediumImage.h;\\n    }\\n\\n    // It doesn't really matter what will you do here, \\n    // as long as item.src, item.w and item.h have valid values.\\n    // \\n    // Just avoid http requests in this listener, as it fires quite often\\n\\n});\\n\\n\\n// Note that init() method is called after gettingData event is bound\\ngallery.init();\\n\")])])]),t(\"ul\",[t(\"li\",[e._v(\"您不必使用看起来完全像上面的幻灯片对象的结构（带有mediumImage和largeImage对象）。例如，您可以将图像的大小直接存储在图像文件名（/path/to/large-image-600x500.jpg）中，然后在getDataData事件中解析大小。PhotoSwipe仅在触发getData事件后才读取item.src，item.w和item.h属性。\")]),e._v(\" \"),t(\"li\",[e._v(\"图片越大，动画越不平滑\")]),e._v(\" \"),t(\"li\",[e._v(\"尽量避免仅基于devicePixelRatio或仅基于视口大小来提供图片，请始终将两者结合\")]),e._v(\" \"),t(\"li\",[e._v(\"缩略图上允许使用 \"),t(\"code\",[e._v(\"srcset\")])])]),e._v(\" \"),t(\"h2\",{attrs:{id:\"性能优化\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#性能优化\"}},[e._v(\"#\")]),e._v(\" 性能优化\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"动画\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#动画\"}},[e._v(\"#\")]),e._v(\" 动画\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"动画效果很大程度上取决于图像的大小。图片越小动画越平滑。因此，请不要使用懒加载和响应式图片，或者在移动设备商使用大于1200x1200的图片\")]),e._v(\" \"),t(\"li\",[e._v(\"不要在动画持续期间使用导致重排或重绘的操作。不要向DOM中添加新元素。不要修改\"),t(\"code\",[e._v(\"display\")]),e._v(\"或\"),t(\"code\",[e._v(\"visibility\")]),e._v(\"属性.您只能修改\"),t(\"code\",[e._v(\"transform\")]),e._v(\"和\"),t(\"code\",[e._v(\"opacity\")]),e._v(\"。尽量使用\"),t(\"code\",[e._v(\"beforeChange\")]),e._v(\",\"),t(\"code\",[e._v(\"initialZoomInEnd\")]),e._v(\",\"),t(\"code\",[e._v(\"initialZoomOutEnd\")]),e._v(\" 事件在动画结束后延迟修改\")]),e._v(\" \"),t(\"li\",[e._v(\"如果启用了放大/缩小动画，则尽量避免在打开PhotoSwipe的缩略图上使用复杂的：hover和：active效果（应用第一个规则）。\")]),e._v(\" \"),t(\"li\",[e._v(\"尽量不要在PhotoSwipe滑动区域上的UI上设置复杂的样式。例如，字幕文本上的文本阴影可能会引起问题。\")])]),e._v(\" \"),t(\"h3\",{attrs:{id:\"包含文件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#包含文件\"}},[e._v(\"#\")]),e._v(\" 包含文件\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"默认的PhotoSwipe UI具有png和svg精灵图。默认情况下，仅在打开PhotoSwipe之后才加载它。为了使控件立即显示，您可以将Gallery 精灵图与站点“ main” 精灵图合并，或使用CSS预加载。\")]),e._v(\" \"),t(\"li\",[e._v(\"如果PhotoSwipe 不是页面的主要功能，请异步加载PhotoSwipe JS文件\")]),e._v(\" \"),t(\"li\",[e._v(\"压缩合并js,css文件\")])])])}),[],!1,null,null,null);n.default=a.exports}}]);","extractedComments":[]}