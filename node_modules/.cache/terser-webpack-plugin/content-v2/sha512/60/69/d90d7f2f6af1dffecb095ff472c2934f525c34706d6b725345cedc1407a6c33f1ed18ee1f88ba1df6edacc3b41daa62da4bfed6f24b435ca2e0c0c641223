{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{59:function(a,t,v){\"use strict\";v.r(t);var _=v(0),s=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"什么是微前端\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是微前端\"}},[a._v(\"#\")]),a._v(\" 什么是微前端\")]),a._v(\" \"),v(\"p\",[a._v(\"微前端就是存在于浏览器端的微服务。一种将独立的前端应用组成一个更大的整体的架构风格\")]),a._v(\" \"),v(\"p\",[a._v(\"即将单页面前端应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用还可以独立开发、独立部署。同时，它们也可以在共享组件的同时进行并行开发——这些组件可以通过 NPM 或者 Git 来管理。\")]),a._v(\" \"),v(\"h1\",{attrs:{id:\"为什么需要微前端\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么需要微前端\"}},[a._v(\"#\")]),a._v(\" 为什么需要微前端\")]),a._v(\" \"),v(\"p\",[a._v(\"微前端的实现，意味着对前端应用的拆分。拆分应用的目的，并不只是为了架构上好看，还为了提升开发效率。\")]),a._v(\" \"),v(\"p\",[a._v(\"微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(Frontend Monolith)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"微前端的优点\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#微前端的优点\"}},[a._v(\"#\")]),a._v(\" 微前端的优点\")]),a._v(\" \"),v(\"ol\",[v(\"li\",[a._v(\"增量升级\")])]),a._v(\" \"),v(\"p\",[a._v(\"对于许多团队而言，这是开始微前端之旅的首要原因。技术债阻碍了项目的发展，只能重写。为了避免完全重写的风险，我们更希望逐个替换旧的模块。\")]),a._v(\" \"),v(\"ol\",{attrs:{start:\"2\"}},[v(\"li\",[a._v(\"应用自治\")])]),a._v(\" \"),v(\"p\",[a._v(\"各个微应用独立开发独立部署，而且每个单独的微型前端应用的源代码都将比单个整体前端应用的源代码少得多。这些较小的代码库对于开发人员来说更容易维护。尤其是我们避免了组件间耦合所导致的复杂性。\")]),a._v(\" \"),v(\"ol\",{attrs:{start:\"3\"}},[v(\"li\",[a._v(\"技术栈无关\")])]),a._v(\" \"),v(\"p\",[a._v(\"每个微应用可使用将拥有各自独立的构建工具，技术框架，你可以在使用 Vue 的同时，又可以使用 React 和 Angular\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"微前端的缺点\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#微前端的缺点\"}},[a._v(\"#\")]),a._v(\" 微前端的缺点\")]),a._v(\" \"),v(\"ol\",[v(\"li\",[a._v(\"应用的拆分基础依赖于基础设施的构建，一旦大量应用依赖于同一基础设施，那么维护变成了一个挑战。\")]),a._v(\" \"),v(\"li\",[a._v(\"拆分的粒度越小，便意味着架构变得复杂、维护成本变高。\")]),a._v(\" \"),v(\"li\",[a._v(\"技术栈一旦多样化，便意味着技术栈混乱\")])]),a._v(\" \"),v(\"h1\",{attrs:{id:\"微前端落地方案\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#微前端落地方案\"}},[a._v(\"#\")]),a._v(\" 微前端落地方案\")]),a._v(\" \"),v(\"p\",[a._v(\"如何拆分应用是微前端的关键\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"路由分发式。\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#路由分发式。\"}},[a._v(\"#\")]),a._v(\" 路由分发式。\")]),a._v(\" \"),v(\"p\",[a._v(\"通过路由将不同的业务分发到不同的独立前端应用上。通常可以通过http服务器的反向代理来实现。\\n应该是采用最多、最易采用的“微前端”方案。\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"前端微服务化。\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#前端微服务化。\"}},[a._v(\"#\")]),a._v(\" 前端微服务化。\")]),a._v(\" \"),v(\"p\",[a._v(\"在不同的框架之上设计通讯、加载机制，以在一个页面内加载对应的应用。即同一个页面中同时存在多个微应用，这些微应用可以是由不同的技术栈开发的。\\n我们希望的是：\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"应用可以自动加载、运行，并能够与应用注册表进行联系。\")]),a._v(\" \"),v(\"li\",[a._v(\"每个应用的开发是完全隔离的，开发时互不影响。它可以接入某个框架，以更好的支持构建。\")])]),a._v(\" \"),v(\"h2\",{attrs:{id:\"微应用。\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#微应用。\"}},[a._v(\"#\")]),a._v(\" 微应用。\")]),a._v(\" \"),v(\"p\",[a._v(\"即在开发时，应用都是以单一、微小应用的形式存在，而在运行时，则通过构建系统合并这些应用，组合成一个新的应用。\")]),a._v(\" \"),v(\"p\",[a._v(\"优点：实现简单、成本较低。\")]),a._v(\" \"),v(\"p\",[a._v(\"缺点：\")]),a._v(\" \"),v(\"ol\",[v(\"li\",[a._v(\"所有应用的依赖需要统一。一旦依赖版本不一致，可能会带来其他的问题。\")]),a._v(\" \"),v(\"li\",[a._v(\"高度依赖于持续集成。每个子应用在提交的时候，都会重新构建出整个应用。一旦一个子应用出错，系统就会出错。\")])]),a._v(\" \"),v(\"h2\",{attrs:{id:\"微件化。\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#微件化。\"}},[a._v(\"#\")]),a._v(\" 微件化。\")]),a._v(\" \"),v(\"p\",[a._v(\"在微前端下的微件化指的是，每个业务团队编写自己的业务代码，并将编译好的代码部署到指定的服务器上。在运行时，我们只需要加载相应业务模块即可。\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"前端容器化。\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#前端容器化。\"}},[a._v(\"#\")]),a._v(\" 前端容器化。\")]),a._v(\" \"),v(\"p\",[a._v(\"通过将 iFrame 作为容器，来容纳其它前端应用。\")]),a._v(\" \"),v(\"p\",[a._v(\"在采用 iframe的时候，我们需要做两件事：\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"设计管理应用机制。\")]),a._v(\" \"),v(\"li\",[a._v(\"设计应用通信机制\")])]),a._v(\" \"),v(\"h2\",{attrs:{id:\"应用组件化。\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应用组件化。\"}},[a._v(\"#\")]),a._v(\" 应用组件化。\")]),a._v(\" \"),v(\"p\",[a._v(\"借助于 Web Components技术，来构建跨框架的前端应用。\")]),a._v(\" \"),v(\"h1\",{attrs:{id:\"微前端架构开源框架-single-spa\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#微前端架构开源框架-single-spa\"}},[a._v(\"#\")]),a._v(\" 微前端架构开源框架 single-spa\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"概览\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#概览\"}},[a._v(\"#\")]),a._v(\" 概览\")]),a._v(\" \"),v(\"p\",[a._v(\"single-spa 包含以下内容：\")]),a._v(\" \"),v(\"ol\",[v(\"li\",[v(\"p\",[a._v(\"Applications,每个应用程序本身就是一个完整的spa。每个应用程序都可以响应url 路由事件，并且必须知道如何从DOM中初始化、挂载和卸载自己。传统SPA应用程序和Single SPA应用程序的主要区别在于，它们必须能够与其他应用程序共存，而且它们没有各自的html页面。\")])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"一个 single-spa-config配置（Html页面和向Single SPA注册应用程序的JavaScript）。每个应用程序都注册了三件东西\")])])]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"A name\")]),a._v(\" \"),v(\"li\",[a._v(\"A function(加载应用程序的代码)\")]),a._v(\" \"),v(\"li\",[a._v(\"A function(确定应用程序何时处于活动状态/非活动状态)\")])]),a._v(\" \"),v(\"h2\",{attrs:{id:\"微前端类型\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#微前端类型\"}},[a._v(\"#\")]),a._v(\" 微前端类型\")]),a._v(\" \"),v(\"h3\",{attrs:{id:\"application-为一组特定路由渲染组件的微前端\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#application-为一组特定路由渲染组件的微前端\"}},[a._v(\"#\")]),a._v(\" application:为一组特定路由渲染组件的微前端\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[a._v(\"使用声明式API registerApplication.提前定义好应用程序，定义他们处于活动状态的条件，但不会直接挂载该应用程序。\")])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"生命周期管理：single-spa管理已注册的应用程序，并负责其所有的生命周期。无需额外编写何时安装或卸载应用的逻辑，single-spa提供自动管理模块。\")])])]),a._v(\" \"),v(\"h3\",{attrs:{id:\"parcels：不受路由控制，渲染组件的微前端\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parcels：不受路由控制，渲染组件的微前端\"}},[a._v(\"#\")]),a._v(\" Parcels：不受路由控制，渲染组件的微前端\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"Parcels 允许在多个应用程序中重用UI\")]),a._v(\" \"),v(\"li\",[a._v(\"手动控制生命周期：通过调用 mountParcel 或 mountRootParcel 立即挂载并返回对象，通过调用 unmount 卸载parcel\")]),a._v(\" \"),v(\"li\",[a._v(\"Parcels 最适合在框架之间共享ui\")])]),a._v(\" \"),v(\"ol\",{attrs:{start:\"3\"}},[v(\"li\",[a._v(\"utility modules:非渲染组件，用于暴露共享JavaScript逻辑的微前端。\")])]),a._v(\" \"),v(\"h2\",{attrs:{id:\"微前端的通信方式\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#微前端的通信方式\"}},[a._v(\"#\")]),a._v(\" 微前端的通信方式\")]),a._v(\" \"),v(\"p\",[a._v(\"微前端应用间的可能需要共享的大致有三种：\")]),a._v(\" \"),v(\"ol\",[v(\"li\",[a._v(\"公共组件、逻辑、和环境变量\")]),a._v(\" \"),v(\"li\",[a._v(\"api data\")]),a._v(\" \"),v(\"li\",[a._v(\"ui状态\")])]),a._v(\" \"),v(\"h3\",{attrs:{id:\"公共组件、逻辑、环境变量\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#公共组件、逻辑、环境变量\"}},[a._v(\"#\")]),a._v(\" 公共组件、逻辑、环境变量\")]),a._v(\" \"),v(\"p\",[a._v(\"你可以在不同的git repos和JavaScript bundles 中导入和导出函数、组件、环境变量等\")]),a._v(\" \"),v(\"h3\",{attrs:{id:\"api-data\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#api-data\"}},[a._v(\"#\")]),a._v(\" api Data\")]),a._v(\" \"),v(\"p\",[a._v(\"可通过导出 fetch函数的方式进行通信\")]),a._v(\" \"),v(\"h3\",{attrs:{id:\"ui-states\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ui-states\"}},[a._v(\"#\")]),a._v(\" ui states\")]),a._v(\" \"),v(\"p\",[a._v(\"UI状态，例如“是否已打开模态框”，“输入的当前值是什么”等在很大程度上不需要在微前端之间共享。如果您发现自己需要不断共享UI状态，那么您的微前端可能比应有的耦合程度更高。考虑将它们合并为一个微前端。\")]),a._v(\" \"),v(\"p\",[a._v(\"极少数情况下可能确实需要共享，此时可以通过发布-订阅模式，利用天生公用的 window对象或 dom对象实现\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"距离落地需要解决的问题\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#距离落地需要解决的问题\"}},[a._v(\"#\")]),a._v(\" 距离落地需要解决的问题\")]),a._v(\" \"),v(\"ol\",[v(\"li\",[a._v(\"是否需要全局状态共享？\")]),a._v(\" \"),v(\"li\",[a._v(\"微应用之间如何解耦？\")]),a._v(\" \"),v(\"li\",[a._v(\"如何实现每个微前端应用的独立部署？\")]),a._v(\" \"),v(\"li\",[a._v(\"。。。。\")])]),a._v(\" \"),v(\"p\",[a._v(\"相关链接：\")]),a._v(\" \"),v(\"p\",[a._v(\"【参考文献]】：\")]),a._v(\" \"),v(\"p\",[a._v(\"https://single-spa.js.org/\\nhttps://www.infoq.cn/article/o6GxRD9iHQOplKICiDDU\")]),a._v(\" \"),v(\"p\",[a._v(\"【示例代码仓库】：\")]),a._v(\" \"),v(\"p\",[a._v(\"https://gitee.com/Janlaywss/vue-single-spa.git\")])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}